import { createSlice } from "@reduxjs/toolkit";
//This code defines a Redux slice for managing the user authentication state.

// The INITIAL_STATE object defines the initial state of the user slice, which is simply an object with a currentUser property initialized to null.
const INITIAL_STATE={
    currentUser: null, //Default value for state
};

// The userSlice object defines the slice itself, including its name, initial state, and a set of reducers. 
//The setCurrentUser reducer takes the current state and an action as its input, and sets the currentUser property of the state to the payload of the action.
export const userSlice = createSlice({
     name: 'users',
     initialState: INITIAL_STATE,
     reducers: {
        setCurrentUser(state, action ) {
            state.currentUser = action.payload
        }
     }
})

// The setCurrentUser action is a named export that allows other parts of the application to dispatch the setCurrentUser action to update the state with a new user object. 
//This action takes a payload argument that represents the new value of the currentUser property.
export const {setCurrentUser} = userSlice.actions;


// The userReducer is also a named export that provides a reducer function for the user slice. 
//This reducer is automatically generated by the createSlice() function from the slice definition above.
export const userReducer = userSlice.reducer;

// Overall, this code provides a simple and structured way to manage the user authentication state in a Redux store. 
//The userSlice object defines the shape of the slice, including its initial state and a set of reducers. 
//The setCurrentUser action can be dispatched to update the state with a new user object, and the userReducer provides a reducer function to handle those updates.